{% extends 'base.html.twig' %}

{% block title %}
	Rassemblement n°{{ gathering }}
{% endblock %}

{% block body %}
<link href="/css/attendance.css" rel="stylesheet"/>
    <style>
        img {
            filter: grayscale(100%) brightness(50%);
        }
    </style>

<div class="col-lg-8 mx-auto p-5 py-md-5">
	<div class="mt-3 text-center">
		<h1 class="h1 mb-2 display-4 text-white">Rassemblement n°{{ gathering }}</h1>
	</div>

	<!-- Existing attendance display code -->
	<div class="row row-cols-2 row-cols-md-2 row-cols-lg-4 g-4 pt-5">
		{% set attendancesSorted = attendances|sort((a, b) => a.getUser().lastname <=> b.getUser().lastname) %}
		{% for attendance in attendancesSorted %}
			<div class="col">
				<div class="img card-attendance-u" data-user-id="{{ attendance.getUser().id }}">
					<div class="abs present">
						<img src="/images/arthur-delacour.png" class="card-img-top zoom" alt="...">
					</div>
					<div class="card-body">
						<h5 class="card-title text-center pt-1 d-none d-md-block">
							{{ attendance.getUser().firstname }}
							{{ attendance.getUser().lastname }}
						</h5>
						<h5 class="card-title text-center pt-1 d-md-none">
							{{ attendance.getUser().firstname }}
						</h5>
					</div>
				</div>
			</div>
		{% endfor %}
        </div>

		<center>
			<form>
				<div class="text-center col-lg-2 pt-5">
					<select class="form-select" id="attendanceType">
						<option value="Entraînement">Entraînement</option>
						<option value="Match">Match</option>
					</select>
				</div>
			</form>

			<div class="pt-2">
				<label for="attendanceDate">Date et heure :</label>
				<input id="attendanceDate" type="datetime-local">
			</div>
		</center>

		<!-- Add a button to trigger the attendance modification -->
		<div class="text-center pt-3">
			<button id="modifyAttendance" class="btn btn-info">
				Enregistrer la modificiation
			</button>
		</div>
	</div>
</div>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
            const abss = document.querySelectorAll('.abs');
            const presentUserIds = [];
            const absentUserIds = [];

            abss.forEach(abs => {
                presentUserIds.push(abs.closest('.img').getAttribute('data-user-id'));
                abs.addEventListener('click', function() {
                    abs.classList.toggle('present');
                    abs.classList.toggle('absent');

                    // Obtenir l'ID de l'utilisateur
                    const userId = abs.closest('.img').getAttribute('data-user-id');

                    if (abs.classList.contains('present')) {
                        presentUserIds.push(abs.closest('.img').getAttribute('data-user-id'));

                        const reasonSelector = document.getElementById('reasonSelector' + userId);
                        reasonSelector.remove();
                    } else {
                        const index = presentUserIds.indexOf(abs.closest('.img').getAttribute('data-user-id'));
                        if (index !== -1) {
                            presentUserIds.splice(index, 1);
                        }
                    }
                    if (abs.classList.contains('absent')) {
                        const reasonSelectorDiv = document.createElement('div');
                        reasonSelectorDiv.classList.add('reason-selector');
                        reasonSelectorDiv.id = 'reasonSelector' + userId;
                        reasonSelectorDiv.innerHTML = `
                            <select class="form-select">
                                <option value="Malade">Malade</option>
                                <option value="Blessé">Blessé</option>
                                <option value="Sport">Sport</option>
                            </select>
                        `;
                        abs.closest('.img').appendChild(reasonSelectorDiv);
                    } else {
                        const index = absentUserIds.indexOf(abs.closest('.img').getAttribute('data-user-id'));
                        if (index !== -1) {
                            absentUserIds.splice(index, 1);
                        }
                    }
                });
            });

                    function finalizeAttendanceAndRedirect() {
                        const isConfirmed = confirm("Êtes-vous sûr de vouloir finaliser la modification de l'appel ?");

                        if (isConfirmed) {
                            const updateAttendance = '{{ path('update_attendance', {'gathering':  gathering}) }}';
                            const reasonSelectors = document.querySelectorAll('.reason-selector select');
                            const type = document.getElementById('attendanceType').value;
                            const datetime = document.getElementById('attendanceDate').value;

                            reasonSelectors.forEach((select) => {
                                const userId = select.closest('.img').getAttribute('data-user-id');
                                const reason = select.value;

                                if (select.closest('.img').querySelector('.abs').classList.contains('present')) {
                                    presentUserIds.push(userId);
                                }

                                if (select.closest('.img').querySelector('.abs').classList.contains('absent')) {
                                    absentUserIds.push({
                                        userId: userId,
                                        reason: reason
                                    });
                                }

                            });

                            fetch(updateAttendance, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    presentUserIds: presentUserIds,
                                    absentUserIds: absentUserIds,
                                    category: '{{ category }}',
                                    type: type,
                                    datetime: datetime
                                })
                            }).then(response => {
                                if (response.ok) {
                                    alert('Modification de l\'assistance effectuée avec succès!');
                                    // You may choose to reload the page or handle success as needed
                                } else {
                                    alert('Erreur, la modification de l\'assistance n\'a pas pu être effectuée !');
                                    // You may choose to handle the error or show a message to the user
                                }
                            });
                        }
                    }

                    document.getElementById('modifyAttendance').addEventListener('click', finalizeAttendanceAndRedirect);
                });
        </script>

{% endblock %}
