{% extends 'base.html.twig' %}

{% block title %}
    Rassemblement n°{{ gathering }}
{% endblock %}

{% block body %}
    <link href="/css/attendance.css" rel="stylesheet"/>
    <style>
        img {
            filter: grayscale(100%) brightness(50%);
        }
    </style>

    <div class="col-lg-8 mx-auto p-5 py-md-5">
        <div class="mt-3 text-center">
            <h1 class="h1 mb-2 display-4">Rassemblement n°{{ gathering }}</h1>
        </div>

        <div class="row row-cols-2 row-cols-md-2 row-cols-lg-4 g-4 pt-5">
            {% set attendancesSorted = attendances|sort((a, b) => a.getUser().lastname <=> b.getUser().lastname) %}
            {% for attendance in attendancesSorted %}
                <div class="col">
                    <div class="img card-attendance-u" data-user-id="{{ attendance.getUser().id }}">
                        <div class="abs {% if attendance.isPresent == 0 %}absent{% else %}present{% endif %}"><img src="/images/arthur-delacour.png" class="card-img-top zoom" alt="..."></div>
                        <div class="card-body">
                            <!-- Affiche le nom de famille uniquement sur les écrans plus grands (md et plus) -->
                            <h5 class="card-title text-center pt-1 d-none d-md-block">{{ attendance.getUser().firstName }} {{ attendance.getUser().lastName }}</h5>
                            <!-- Affiche le prénom sur les écrans plus petits (jusqu'à md) -->
                            <h5 class="card-title text-center pt-1 d-md-none">{{ attendance.getUser().firstName }}</h5>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>

        <center>
            <form>
                <div class="text-center col-lg-2 pt-5">
                    <select class="form-select" id="attendanceType">
                        <option value="Entraînement">Entraînement</option>
                        <option value="Match">Match</option>
                    </select>
                </div>
            </form>

            <div class="pt-2">
                <label for="attendanceDate">Date et heure :</label>
                <input id="attendanceDate" type="datetime-local">
            </div>
        </center>

        <div class="g-4 pt-5 row">
            <div class="col text-end" style="text-align: start;">
                <a class="btn btn-success" id="modifierAppel">
                    <i class="fa-solid fa-check"></i>
                    Enregistrer la modification</a>
            </div>
            <div class="col">
                <a class="btn btn-danger" href="{{ path('app_gathering') }}">
                    <i class="fa-solid fa-xmark"></i>
                    Annuler la modification</a>
            </div>
        </div>

        <div class="g-4 pt-3 pb-3">
            <div class="col text-center" style="text-align: start;">
                <a href="/" class="btn btn-secondary">
                    <i class="fa-solid fa-house"></i>
                    Accueil</a>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const abss = document.querySelectorAll('.abs');
            const presentUserIds = [];
            const absentUserIds = [];

            abss.forEach(abs => {
                presentUserIds.push(abs.closest('.img').getAttribute('data-user-id'));

                const userId = abs.closest('.img').getAttribute('data-user-id');

                if (abs.classList.contains('absent')) {
                    const reasonSelectorDiv = document.createElement('div');
                    
                    reasonSelectorDiv.classList.add('reason-selector');
                    reasonSelectorDiv.id = 'reasonSelector' + userId;
                    reasonSelectorDiv.innerHTML = `
                        <select class="form-select">
                            <option value="Malade">Malade</option>
                            <option value="Blessé">Blessé</option>
                            <option value="Sport">Sport</option>
                        </select>
                    `;
                    
                    abs.closest('.img').appendChild(reasonSelectorDiv);
                }

                abs.addEventListener('click', function() {
                    abs.classList.toggle('present');
                    abs.classList.toggle('absent');

                    // Obtenir l'ID de l'utilisateur
                    const userId = abs.closest('.img').getAttribute('data-user-id');

                    if (abs.classList.contains('present')) {
                        presentUserIds.push(abs.closest('.img').getAttribute('data-user-id'));

                        const reasonSelector = document.getElementById('reasonSelector' + userId);
                        reasonSelector.remove();
                    } else {
                        const index = presentUserIds.indexOf(abs.closest('.img').getAttribute('data-user-id'));
                        if (index !== -1) {
                            presentUserIds.splice(index, 1);
                        }
                    }
                    if (abs.classList.contains('absent')) {
                        const reasonSelectorDiv = document.createElement('div');
                        
                        reasonSelectorDiv.classList.add('reason-selector');
                        reasonSelectorDiv.id = 'reasonSelector' + userId;
                        reasonSelectorDiv.innerHTML = `
                            <select class="form-select">
                                <option value="Malade">Malade</option>
                                <option value="Blessé">Blessé</option>
                                <option value="Sport">Sport</option>
                            </select>
                        `;
                        
                        abs.closest('.img').appendChild(reasonSelectorDiv);
                    } else {
                        const index = absentUserIds.indexOf(abs.closest('.img').getAttribute('data-user-id'));
                        if (index !== -1) {
                            absentUserIds.splice(index, 1);
                        }
                    }
                });
            });

            function finalizeAttendanceAndRedirect() {
                // Afficher une boîte de dialogue de confirmation
                const isConfirmed = confirm("Êtes-vous sûr de vouloir finaliser la modification de l'appel ?");

                if (isConfirmed) {
                    // Continuer le processus de finalisation de la modification de l'appel
                    const updateAttendance = '{{ path('update_attendance', {'gathering':  gathering}) }}';
                    const reasonSelectors = document.querySelectorAll('.reason-selector select');
                    const type = document.getElementById('attendanceType').value;
                    const datetime = document.getElementById('attendanceDate').value;

                    reasonSelectors.forEach((select) => {
                        const userId = select.closest('.img').getAttribute('data-user-id');
                        const reason = select.value;

                        const absElement = select.closest('.img').querySelector('.abs');

                        if (absElement.classList.contains('present')) {
                            presentUserIds.push({
                                userId: userId
                            });
                        }

                        if (absElement.classList.contains('absent')) {
                            absentUserIds.push({
                                userId: userId,
                                reason: reason
                            });
                        }
                    });

                    fetch(updateAttendance, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            presentUserIds: presentUserIds,
                            absentUserIds: absentUserIds,
                            category: '{{ category }}',
                            type: type,
                            datetime: datetime
                        })
                    }).then(response => {
                        if (response.ok) {
                            alert('Modification de l\'appel effectuée avec succès !');
                            // window.location.href = '{{ path('app_gathering') }}';
                        } else {
                            alert('Erreur, la modification de l\'appel n\'a pas pu être effectuée !');
                        }
                    });
                }
            }

            document.getElementById('modifierAppel').addEventListener('click', finalizeAttendanceAndRedirect);
        });
    </script>

{% endblock %}
